#lang racket
;MAIN

(provide (all-defined-out))
(require "Algorithm.rkt")
;(require "graphics.rkt")
(require "home.rkt")
;----------------------------------------------------------------homepage
;(home)
;-----------------------------------------------------------------getting the data through gui
(define GRID (home))
(define dummy-grid GRID)
(define list-of-obstacles '())
(define initial-point '())
(define end-point '())

(define (flat-grid g)
  (define r-new -1)
  (define c-new -1)
  (define (flatten-grid g r c)
    (if (>= r (vector-length g))
        (void 1);exit condition
        (begin
          (if (= c (- (vector-length (vector-ref g r)) 1)) (begin
                                                             (set! c-new 0)
                                                             (set! r-new (+ r 1)))
              (begin
                (set! c-new (+ c 1))
                (set! r-new r)))
          (let* ([res (vec-ref g r c)])
            (cond [(= res 10) (begin
                                (set! initial-point (cons r c))
                                (vec-set! g r c 1)
                                (flatten-grid g r-new c-new))]
                  [(= res 11) (begin
                                (set! end-point (cons r c))
                                (vec-set! g r c 1)
                                (flatten-grid g r-new c-new))]
                  [(<= res 0) (begin
                               (vec-set! g r c 0)
                               (set! list-of-obstacles (append list-of-obstacles (list (cons r c))))
                               (flatten-grid g r-new c-new))]
                  [(>= res 1) (begin
                               (vec-set! g r c 1)
                               (flatten-grid g r-new c-new))]
                  [else (flatten-grid g r-new c-new)])))))
    (flatten-grid g 0 0))

;GRID is now flattened and ready to be given to algo
(flat-grid GRID)
;-----------------------------------------------------------------finding the path

(aStarSearch GRID initial-point end-point)
;PATH stores the shortest path
;---------------------------------------------------------------displaying the shortest path



